# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pharos_vlp_tilt/perfect.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pharos_vlp_tilt.msg

class perfect(genpy.Message):
  _md5sum = "90a56c4e8308c1352b958efc8367b00b"
  _type = "pharos_vlp_tilt/perfect"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """info info
point point
state state

================================================================================
MSG: pharos_vlp_tilt/info
int32 laser
int32 hori

================================================================================
MSG: pharos_vlp_tilt/point
float64 x
float64 y
float64 z
float64 intensity

================================================================================
MSG: pharos_vlp_tilt/state
int32 is_ground
int32 is_del
int32 is_infect
"""
  __slots__ = ['info','point','state']
  _slot_types = ['pharos_vlp_tilt/info','pharos_vlp_tilt/point','pharos_vlp_tilt/state']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       info,point,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(perfect, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.info is None:
        self.info = pharos_vlp_tilt.msg.info()
      if self.point is None:
        self.point = pharos_vlp_tilt.msg.point()
      if self.state is None:
        self.state = pharos_vlp_tilt.msg.state()
    else:
      self.info = pharos_vlp_tilt.msg.info()
      self.point = pharos_vlp_tilt.msg.point()
      self.state = pharos_vlp_tilt.msg.state()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i4d3i().pack(_x.info.laser, _x.info.hori, _x.point.x, _x.point.y, _x.point.z, _x.point.intensity, _x.state.is_ground, _x.state.is_del, _x.state.is_infect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.info is None:
        self.info = pharos_vlp_tilt.msg.info()
      if self.point is None:
        self.point = pharos_vlp_tilt.msg.point()
      if self.state is None:
        self.state = pharos_vlp_tilt.msg.state()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.info.laser, _x.info.hori, _x.point.x, _x.point.y, _x.point.z, _x.point.intensity, _x.state.is_ground, _x.state.is_del, _x.state.is_infect,) = _get_struct_2i4d3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i4d3i().pack(_x.info.laser, _x.info.hori, _x.point.x, _x.point.y, _x.point.z, _x.point.intensity, _x.state.is_ground, _x.state.is_del, _x.state.is_infect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.info is None:
        self.info = pharos_vlp_tilt.msg.info()
      if self.point is None:
        self.point = pharos_vlp_tilt.msg.point()
      if self.state is None:
        self.state = pharos_vlp_tilt.msg.state()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.info.laser, _x.info.hori, _x.point.x, _x.point.y, _x.point.z, _x.point.intensity, _x.state.is_ground, _x.state.is_del, _x.state.is_infect,) = _get_struct_2i4d3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4d3i = None
def _get_struct_2i4d3i():
    global _struct_2i4d3i
    if _struct_2i4d3i is None:
        _struct_2i4d3i = struct.Struct("<2i4d3i")
    return _struct_2i4d3i
