# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pharos_vlp_tilt/perfectarray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pharos_vlp_tilt.msg
import std_msgs.msg

class perfectarray(genpy.Message):
  _md5sum = "393d188248af978f922d9cd672182dbf"
  _type = "pharos_vlp_tilt/perfectarray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
perfect[] objects
min_seq[16] min_seq
max_seq[16] max_seq
center_position center
center_position min_center
center_position max_center
point min_object
point max_object
int32 min_hori
int32 max_hori
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: pharos_vlp_tilt/perfect
info info
point point
state state

================================================================================
MSG: pharos_vlp_tilt/info
int32 laser
int32 hori

================================================================================
MSG: pharos_vlp_tilt/point
float64 x
float64 y
float64 z
float64 intensity

================================================================================
MSG: pharos_vlp_tilt/state
int32 is_ground
int32 is_del
int32 is_infect

================================================================================
MSG: pharos_vlp_tilt/min_seq
int16 i
int16 hori

================================================================================
MSG: pharos_vlp_tilt/max_seq
int16 i
int16 hori

================================================================================
MSG: pharos_vlp_tilt/center_position
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','objects','min_seq','max_seq','center','min_center','max_center','min_object','max_object','min_hori','max_hori']
  _slot_types = ['std_msgs/Header','pharos_vlp_tilt/perfect[]','pharos_vlp_tilt/min_seq[16]','pharos_vlp_tilt/max_seq[16]','pharos_vlp_tilt/center_position','pharos_vlp_tilt/center_position','pharos_vlp_tilt/center_position','pharos_vlp_tilt/point','pharos_vlp_tilt/point','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects,min_seq,max_seq,center,min_center,max_center,min_object,max_object,min_hori,max_hori

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(perfectarray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
      if self.min_seq is None:
        self.min_seq = [pharos_vlp_tilt.msg.min_seq() for _ in range(16)]
      if self.max_seq is None:
        self.max_seq = [pharos_vlp_tilt.msg.max_seq() for _ in range(16)]
      if self.center is None:
        self.center = pharos_vlp_tilt.msg.center_position()
      if self.min_center is None:
        self.min_center = pharos_vlp_tilt.msg.center_position()
      if self.max_center is None:
        self.max_center = pharos_vlp_tilt.msg.center_position()
      if self.min_object is None:
        self.min_object = pharos_vlp_tilt.msg.point()
      if self.max_object is None:
        self.max_object = pharos_vlp_tilt.msg.point()
      if self.min_hori is None:
        self.min_hori = 0
      if self.max_hori is None:
        self.max_hori = 0
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []
      self.min_seq = [pharos_vlp_tilt.msg.min_seq() for _ in range(16)]
      self.max_seq = [pharos_vlp_tilt.msg.max_seq() for _ in range(16)]
      self.center = pharos_vlp_tilt.msg.center_position()
      self.min_center = pharos_vlp_tilt.msg.center_position()
      self.max_center = pharos_vlp_tilt.msg.center_position()
      self.min_object = pharos_vlp_tilt.msg.point()
      self.max_object = pharos_vlp_tilt.msg.point()
      self.min_hori = 0
      self.max_hori = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.info
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.laser, _x.hori))
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.intensity))
        _v3 = val1.state
        _x = _v3
        buff.write(_get_struct_3i().pack(_x.is_ground, _x.is_del, _x.is_infect))
      for val1 in self.min_seq:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.i, _x.hori))
      for val1 in self.max_seq:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.i, _x.hori))
      _x = self
      buff.write(_get_struct_17d2i().pack(_x.center.x, _x.center.y, _x.center.z, _x.min_center.x, _x.min_center.y, _x.min_center.z, _x.max_center.x, _x.max_center.y, _x.max_center.z, _x.min_object.x, _x.min_object.y, _x.min_object.z, _x.min_object.intensity, _x.max_object.x, _x.max_object.y, _x.max_object.z, _x.max_object.intensity, _x.min_hori, _x.max_hori))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      if self.min_seq is None:
        self.min_seq = None
      if self.max_seq is None:
        self.max_seq = None
      if self.center is None:
        self.center = pharos_vlp_tilt.msg.center_position()
      if self.min_center is None:
        self.min_center = pharos_vlp_tilt.msg.center_position()
      if self.max_center is None:
        self.max_center = pharos_vlp_tilt.msg.center_position()
      if self.min_object is None:
        self.min_object = pharos_vlp_tilt.msg.point()
      if self.max_object is None:
        self.max_object = pharos_vlp_tilt.msg.point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = pharos_vlp_tilt.msg.perfect()
        _v4 = val1.info
        _x = _v4
        start = end
        end += 8
        (_x.laser, _x.hori,) = _get_struct_2i().unpack(str[start:end])
        _v5 = val1.point
        _x = _v5
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.intensity,) = _get_struct_4d().unpack(str[start:end])
        _v6 = val1.state
        _x = _v6
        start = end
        end += 12
        (_x.is_ground, _x.is_del, _x.is_infect,) = _get_struct_3i().unpack(str[start:end])
        self.objects.append(val1)
      self.min_seq = []
      for i in range(0, 16):
        val1 = pharos_vlp_tilt.msg.min_seq()
        _x = val1
        start = end
        end += 4
        (_x.i, _x.hori,) = _get_struct_2h().unpack(str[start:end])
        self.min_seq.append(val1)
      self.max_seq = []
      for i in range(0, 16):
        val1 = pharos_vlp_tilt.msg.max_seq()
        _x = val1
        start = end
        end += 4
        (_x.i, _x.hori,) = _get_struct_2h().unpack(str[start:end])
        self.max_seq.append(val1)
      _x = self
      start = end
      end += 144
      (_x.center.x, _x.center.y, _x.center.z, _x.min_center.x, _x.min_center.y, _x.min_center.z, _x.max_center.x, _x.max_center.y, _x.max_center.z, _x.min_object.x, _x.min_object.y, _x.min_object.z, _x.min_object.intensity, _x.max_object.x, _x.max_object.y, _x.max_object.z, _x.max_object.intensity, _x.min_hori, _x.max_hori,) = _get_struct_17d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v7 = val1.info
        _x = _v7
        buff.write(_get_struct_2i().pack(_x.laser, _x.hori))
        _v8 = val1.point
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.intensity))
        _v9 = val1.state
        _x = _v9
        buff.write(_get_struct_3i().pack(_x.is_ground, _x.is_del, _x.is_infect))
      for val1 in self.min_seq:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.i, _x.hori))
      for val1 in self.max_seq:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.i, _x.hori))
      _x = self
      buff.write(_get_struct_17d2i().pack(_x.center.x, _x.center.y, _x.center.z, _x.min_center.x, _x.min_center.y, _x.min_center.z, _x.max_center.x, _x.max_center.y, _x.max_center.z, _x.min_object.x, _x.min_object.y, _x.min_object.z, _x.min_object.intensity, _x.max_object.x, _x.max_object.y, _x.max_object.z, _x.max_object.intensity, _x.min_hori, _x.max_hori))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      if self.min_seq is None:
        self.min_seq = None
      if self.max_seq is None:
        self.max_seq = None
      if self.center is None:
        self.center = pharos_vlp_tilt.msg.center_position()
      if self.min_center is None:
        self.min_center = pharos_vlp_tilt.msg.center_position()
      if self.max_center is None:
        self.max_center = pharos_vlp_tilt.msg.center_position()
      if self.min_object is None:
        self.min_object = pharos_vlp_tilt.msg.point()
      if self.max_object is None:
        self.max_object = pharos_vlp_tilt.msg.point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = pharos_vlp_tilt.msg.perfect()
        _v10 = val1.info
        _x = _v10
        start = end
        end += 8
        (_x.laser, _x.hori,) = _get_struct_2i().unpack(str[start:end])
        _v11 = val1.point
        _x = _v11
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.intensity,) = _get_struct_4d().unpack(str[start:end])
        _v12 = val1.state
        _x = _v12
        start = end
        end += 12
        (_x.is_ground, _x.is_del, _x.is_infect,) = _get_struct_3i().unpack(str[start:end])
        self.objects.append(val1)
      self.min_seq = []
      for i in range(0, 16):
        val1 = pharos_vlp_tilt.msg.min_seq()
        _x = val1
        start = end
        end += 4
        (_x.i, _x.hori,) = _get_struct_2h().unpack(str[start:end])
        self.min_seq.append(val1)
      self.max_seq = []
      for i in range(0, 16):
        val1 = pharos_vlp_tilt.msg.max_seq()
        _x = val1
        start = end
        end += 4
        (_x.i, _x.hori,) = _get_struct_2h().unpack(str[start:end])
        self.max_seq.append(val1)
      _x = self
      start = end
      end += 144
      (_x.center.x, _x.center.y, _x.center.z, _x.min_center.x, _x.min_center.y, _x.min_center.z, _x.max_center.x, _x.max_center.y, _x.max_center.z, _x.min_object.x, _x.min_object.y, _x.min_object.z, _x.min_object.intensity, _x.max_object.x, _x.max_object.y, _x.max_object.z, _x.max_object.intensity, _x.min_hori, _x.max_hori,) = _get_struct_17d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_17d2i = None
def _get_struct_17d2i():
    global _struct_17d2i
    if _struct_17d2i is None:
        _struct_17d2i = struct.Struct("<17d2i")
    return _struct_17d2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
