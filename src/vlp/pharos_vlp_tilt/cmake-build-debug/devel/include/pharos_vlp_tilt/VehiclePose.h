// Generated by gencpp from file pharos_vlp_tilt/VehiclePose.msg
// DO NOT EDIT!


#ifndef PHAROS_VLP_TILT_MESSAGE_VEHICLEPOSE_H
#define PHAROS_VLP_TILT_MESSAGE_VEHICLEPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Time.h>

namespace pharos_vlp_tilt
{
template <class ContainerAllocator>
struct VehiclePose_
{
  typedef VehiclePose_<ContainerAllocator> Type;

  VehiclePose_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , stamp()  {
    }
  VehiclePose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , stamp(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef  ::std_msgs::Time_<ContainerAllocator>  _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> const> ConstPtr;

}; // struct VehiclePose_

typedef ::pharos_vlp_tilt::VehiclePose_<std::allocator<void> > VehiclePose;

typedef boost::shared_ptr< ::pharos_vlp_tilt::VehiclePose > VehiclePosePtr;
typedef boost::shared_ptr< ::pharos_vlp_tilt::VehiclePose const> VehiclePoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pharos_vlp_tilt

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pharos_vlp_tilt': ['/home/jwkolab/i30_ws_190409/src/pharos/pharos_vlp_tilt/msg'], 'pharos_msgs': ['/home/jwkolab/i30_ws_190409/src/pharos/pharos_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4cf57efffc41543b58e200275651435";
  }

  static const char* value(const ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4cf57efffc41543ULL;
  static const uint64_t static_value2 = 0xb58e200275651435ULL;
};

template<class ContainerAllocator>
struct DataType< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pharos_vlp_tilt/VehiclePose";
  }

  static const char* value(const ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 theta\n\
std_msgs/Time stamp\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
";
  }

  static const char* value(const ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehiclePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pharos_vlp_tilt::VehiclePose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "stamp: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHAROS_VLP_TILT_MESSAGE_VEHICLEPOSE_H
