// Generated by gencpp from file pharos_vlp_tilt/vector_perfect_array.msg
// DO NOT EDIT!


#ifndef PHAROS_VLP_TILT_MESSAGE_VECTOR_PERFECT_ARRAY_H
#define PHAROS_VLP_TILT_MESSAGE_VECTOR_PERFECT_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pharos_vlp_tilt/perfectarray.h>

namespace pharos_vlp_tilt
{
template <class ContainerAllocator>
struct vector_perfect_array_
{
  typedef vector_perfect_array_<ContainerAllocator> Type;

  vector_perfect_array_()
    : header()
    , one()  {
    }
  vector_perfect_array_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , one(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::pharos_vlp_tilt::perfectarray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pharos_vlp_tilt::perfectarray_<ContainerAllocator> >::other >  _one_type;
  _one_type one;





  typedef boost::shared_ptr< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> const> ConstPtr;

}; // struct vector_perfect_array_

typedef ::pharos_vlp_tilt::vector_perfect_array_<std::allocator<void> > vector_perfect_array;

typedef boost::shared_ptr< ::pharos_vlp_tilt::vector_perfect_array > vector_perfect_arrayPtr;
typedef boost::shared_ptr< ::pharos_vlp_tilt::vector_perfect_array const> vector_perfect_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pharos_vlp_tilt

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'pharos_vlp_tilt': ['/home/jwkolab/i30_ws_190409/src/pharos/pharos_vlp_tilt/msg'], 'pharos_msgs': ['/home/jwkolab/i30_ws_190409/src/pharos/pharos_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57e47adbe1b2b913a3385ad439b88169";
  }

  static const char* value(const ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57e47adbe1b2b913ULL;
  static const uint64_t static_value2 = 0xa3385ad439b88169ULL;
};

template<class ContainerAllocator>
struct DataType< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pharos_vlp_tilt/vector_perfect_array";
  }

  static const char* value(const ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
perfectarray[] one\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/perfectarray\n\
std_msgs/Header header\n\
perfect[] objects\n\
min_seq[16] min_seq\n\
max_seq[16] max_seq\n\
center_position center\n\
center_position min_center\n\
center_position max_center\n\
point min_object\n\
point max_object\n\
int32 min_hori\n\
int32 max_hori\n\
================================================================================\n\
MSG: pharos_vlp_tilt/perfect\n\
info info\n\
point point\n\
state state\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/info\n\
int32 laser\n\
int32 hori\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/point\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 intensity\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/state\n\
int32 is_ground\n\
int32 is_del\n\
int32 is_infect\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/min_seq\n\
int16 i\n\
int16 hori\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/max_seq\n\
int16 i\n\
int16 hori\n\
\n\
================================================================================\n\
MSG: pharos_vlp_tilt/center_position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.one);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vector_perfect_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pharos_vlp_tilt::vector_perfect_array_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "one[]" << std::endl;
    for (size_t i = 0; i < v.one.size(); ++i)
    {
      s << indent << "  one[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pharos_vlp_tilt::perfectarray_<ContainerAllocator> >::stream(s, indent + "    ", v.one[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHAROS_VLP_TILT_MESSAGE_VECTOR_PERFECT_ARRAY_H
